{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/Tracklist/Tracklist.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","Tracklist","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userID","method","body","JSON","stringify","playlistID","uris","App","playlistName","updatePlaylistName","find","savedTracks","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a8459180.chunk.js","sourcesContent":["const clientId = '94c3bfdc768b4ac2888e8a44dab33c31';\nconst redirectUri = 'http://afraid-brothers.surge.sh';\n\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    //check for access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      let expiresIn = Number(expiresInMatch[1]);\n      //This clears the parameters, allowing to grab new access token then it expires\n      window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: { Authorization: `Bearer ${accessToken}` },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map((track) => ({\n          id: track.id,\n          name: track.name,\n          artists: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n        }));\n      });\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userID;\n\n    return fetch('https://api.spotify.com/v1/me', { headers: headers })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        userID = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({ name: name }),\n        })\n          .then((response) => response.json())\n          .then((jsonResponse) => {\n            const playlistID = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,\n              {\n                method: 'POST',\n                headers: headers,\n                body: JSON.stringify({ uris: trackUris }),\n              }\n            );\n          });\n      });\n  }, // end of savePlaylist method\n}; // end of Spotify object\n\nexport default Spotify;\n","import React from 'react';\nimport './SearchBar.css';\n\nexport class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state ={term: '' }\n    this.search = this.search.bind(this);\n    this.handleTermChange=this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(event) {\n    this.setState({ term: event.target.value });\n  }\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './Track.css';\n\n\nexport class Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>;\n    } else {\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\n    }\n  }\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>\n            {this.props.track.artist}| {this.props.track.album}{' '}\n          </p>\n        </div>\n        <button className=\"Track-action\">{this.renderAction()}</button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './Tracklist.css';\nimport { Track } from '../Track/Track';\n\nexport class Tracklist extends React.Component {\n  render() {\n    return (\n      <div className=\"Tracklist\">\n        {this.props.tracks.map((track) => {\n          return (\n            <Track\n              onAdd={this.props.onAdd}\n              track={track}\n              key={track.id}\n              onRemove={this.props.onRemove}\n              isRemoval={this.props.isRemoval}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './SearchResults.css';\nimport { Tracklist } from '../Tracklist/Tracklist';\n\nexport class SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <Tracklist\n          onAdd={this.props.onAdd}\n          isRemoval={false}\n          tracks={this.props.searchResults}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './Playlist.css';\nimport { Tracklist } from '../Tracklist/Tracklist';\n\nexport class Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input defaultValue=\"New Playlist\" onChange={this.handleNameChange} />\n        <Tracklist\n          tracks={this.props.playlistTracks}\n          onRemove={this.props.onRemove}\n          isRemoval={true}\n        />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { SearchResults } from '../SearchResults/SearchResults.js';\nimport { Playlist } from '../Playlist/Playlist.js';\nimport Spotify from '../../util/Spotify.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: [],\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find((savedTracks) => savedTracks.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter((currentTrack) => currentTrack.id !== track.id);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map((track) => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({ playlistName: 'New Playlist', playlistTracks: [] })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then((searchResults) => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              onAdd={this.addTrack}\n              searchResults={this.state.searchResults}\n            />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}